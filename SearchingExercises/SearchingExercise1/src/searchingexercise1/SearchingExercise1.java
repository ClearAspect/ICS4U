/*
Roan Maosn
04/27/23

1) Reads the data from BookList.txt into the program. This data file is already sorted for you. 
Write a class which represents a Book. A Book has a reference number and a title. 
Create a new Book for each record in the datafile and add it to an ArrayList.
2) Searches the ArrayList for the book with the given reference number (supplied by the user)
	-If the reference number is found, display the title of that book
	-Otherwise display “Book # X Not Found”
3) Displays the number of Books the program had to examine before finding the desired book

Your program is to search for the book using both a linear and a binary search and output the number of books that each search had to examine so that we may compare their efficiency.

Note: The total number of books is not known, therefore you should use ArrayLists.
Also note: The number of books processed in the following example output. Yours should match.
*/
package searchingexercise1;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.ArrayList;

/**
 *
 * @author roanm
 */
public class SearchingExercise1 extends javax.swing.JFrame {

    public static ArrayList<Integer> referenceNumbers = new ArrayList();
    public static ArrayList bookNames = new ArrayList();
    public static int linearCount = 0, binaryCount = 0;

    /**
     * Creates new form SearchingExercise1
     */
    public SearchingExercise1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLbl = new javax.swing.JLabel();
        infoLbl = new javax.swing.JLabel();
        referenceNumberLbl = new javax.swing.JLabel();
        referenceNumberTxt = new javax.swing.JTextField();
        findItBtn = new javax.swing.JButton();
        linearSearchLbl = new javax.swing.JLabel();
        binarySearchLbl = new javax.swing.JLabel();
        linearSearchTxt = new javax.swing.JTextField();
        binarySearchTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLbl.setFont(new java.awt.Font("Cascadia Code", 1, 24)); // NOI18N
        titleLbl.setForeground(new java.awt.Color(255, 43, 43));
        titleLbl.setText("Children's Classics");

        infoLbl.setFont(new java.awt.Font("Cascadia Code", 0, 12)); // NOI18N
        infoLbl.setText("This program will find the title of a book based on it's reference number");

        referenceNumberLbl.setFont(new java.awt.Font("Cascadia Code", 0, 12)); // NOI18N
        referenceNumberLbl.setText("Enter the Reference Number:");

        referenceNumberTxt.setFont(new java.awt.Font("Cascadia Code", 0, 12)); // NOI18N

        findItBtn.setFont(new java.awt.Font("Cascadia Code", 0, 12)); // NOI18N
        findItBtn.setText("Find it!");
        findItBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findItBtnActionPerformed(evt);
            }
        });

        linearSearchLbl.setFont(new java.awt.Font("Cascadia Code", 0, 12)); // NOI18N
        linearSearchLbl.setText("Linear Search:");

        binarySearchLbl.setFont(new java.awt.Font("Cascadia Code", 0, 12)); // NOI18N
        binarySearchLbl.setText("Binary Search:");

        linearSearchTxt.setEditable(false);
        linearSearchTxt.setFont(new java.awt.Font("Cascadia Code", 0, 12)); // NOI18N

        binarySearchTxt.setEditable(false);
        binarySearchTxt.setFont(new java.awt.Font("Cascadia Code", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(infoLbl)
                            .addComponent(titleLbl)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(referenceNumberLbl)
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(findItBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(referenceNumberTxt)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(binarySearchLbl)
                            .addComponent(linearSearchLbl))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(linearSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(binarySearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(157, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(titleLbl)
                .addGap(40, 40, 40)
                .addComponent(infoLbl)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(referenceNumberLbl)
                    .addComponent(referenceNumberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(findItBtn)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linearSearchLbl)
                    .addComponent(linearSearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(binarySearchLbl)
                    .addComponent(binarySearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findItBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findItBtnActionPerformed
        // TODO add your handling code here:
        int referenceNum = Integer.parseInt(referenceNumberTxt.getText());

        linearCount = 0;
        int linearIndex = linearSearch(referenceNum);

        if (linearIndex > -1) {
            linearSearchTxt.setText("Found: " + bookNames.get(linearIndex) + ". " + linearCount + " books proccessed");
        } else {
            linearSearchTxt.setText("Book # " + referenceNum + " is not on the list.");
        }

        binaryCount = 1;
        int binaryIndex = binarySearch(0, referenceNumbers.size(), referenceNum);
        System.out.println(binaryCount+"");
        
        if (binaryIndex > -1) {
            binarySearchTxt.setText("Found: " + bookNames.get(binaryIndex) + ". " + binaryCount + " books proccessed");
        } else {
            binarySearchTxt.setText("Book # " + referenceNum + " is not on the list.");

        }
    }//GEN-LAST:event_findItBtnActionPerformed

    public int linearSearch(int num) {
        for (int i = 0; i < referenceNumbers.size(); i++) {
            linearCount++;
            if (referenceNumbers.get(i) == num) {
                return i;
            }
        }
        return -1;
    }

    public static int binarySearch(int left, int right, int num) {
        int middle;
        binaryCount++;

        if (left > right) {
            return -1;
        }

        middle = (left + right) / 2;

        if (referenceNumbers.get(middle) == num) {
            return middle;
        }

        if (referenceNumbers.get(middle) > num) {
            return binarySearch(left, middle - 1, num);
        } else {
            return binarySearch(middle + 1, right, num);
        }
    }

    public static void getData() {
        try {
            File f = new File("src/searchingexercise1/BookList.txt");
            Scanner s = new Scanner(f);
            while (s.hasNextLine()) {
                referenceNumbers.add(Integer.parseInt(s.nextLine()));
                bookNames.add(s.nextLine());
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error:" + e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchingExercise1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchingExercise1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchingExercise1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchingExercise1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchingExercise1().setVisible(true);
            }
        });

        getData();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel binarySearchLbl;
    private javax.swing.JTextField binarySearchTxt;
    private javax.swing.JButton findItBtn;
    private javax.swing.JLabel infoLbl;
    private javax.swing.JLabel linearSearchLbl;
    private javax.swing.JTextField linearSearchTxt;
    private javax.swing.JLabel referenceNumberLbl;
    private javax.swing.JTextField referenceNumberTxt;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration//GEN-END:variables
}
